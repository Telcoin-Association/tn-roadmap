name: Update roadmap.json

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'

jobs:
  update-roadmap:
    name: Refresh roadmap data
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate roadmap.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node <<'NODE'
          const fs = require('fs');

          const query = `
            query($cursor: String) {
              repository(owner: "Telcoin-Association", name: "telcoin-network") {
                issues(states: OPEN, first: 100, after: $cursor, orderBy: { field: UPDATED_AT, direction: DESC }) {
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                  nodes {
                    number
                    title
                    url
                    updatedAt
                  }
                }
              }
            }
          `;

          async function fetchIssues() {
            const results = [];
            let cursor = null;

            while (true) {
              const response = await fetch('https://api.github.com/graphql', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  Authorization: `bearer ${process.env.GITHUB_TOKEN}`
                },
                body: JSON.stringify({ query, variables: { cursor } })
              });

              if (!response.ok) {
                const text = await response.text();
                throw new Error(`GitHub API responded with ${response.status}: ${text}`);
              }

              const payload = await response.json();

              if (payload.errors) {
                throw new Error(`GitHub API returned errors: ${JSON.stringify(payload.errors)}`);
              }

              const { nodes, pageInfo } = payload.data.repository.issues;

              results.push(
                ...nodes.map(({ number, title, url, updatedAt }) => ({
                  number,
                  title,
                  url,
                  updatedAt
                }))
              );

              if (!pageInfo.hasNextPage) {
                break;
              }

              cursor = pageInfo.endCursor;
            }

            return results;
          }

          (async () => {
            try {
              const issues = await fetchIssues();
              const output = JSON.stringify(issues, null, 2);
              fs.writeFileSync('roadmap.json', `${output}\n`, 'utf8');
            } catch (error) {
              console.error('Failed to generate roadmap.json');
              console.error(error);
              process.exit(1);
            }
          })();
          NODE

      - name: Commit roadmap.json
        run: |
          if git status --porcelain roadmap.json | grep -q '.'; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add roadmap.json
            git commit -m "Update roadmap.json"
            git push
          else
            echo "No changes to commit"
          fi
